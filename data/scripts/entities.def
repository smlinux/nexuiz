/*QUAKED _skybox (0.77 0.88 1.0) (-4 -4 -4) (4 4 4) 
Compiler-only entity that specifies a the origin of a sky box (a wholly contained, separate area of the map), similar to some games' portal skies. When compiled with Q3Map2, the sky box surfaces will be visible from any place where sky is normally visible. It will cast shadows on the normal parts of the map, and can be used with cloud layers and other effects. As it is compiler-only, it can't "scale up" entities in its box.
To use this, carve a small box in some larger structure on your map, place this entity inside that box hole, and make a small version on what should be seen in the sky there.
-------- KEYS --------
angle: rotation angle of the sky surfaces.
angles: Individual control of PITCH, YAW, and ROLL (default 0 0 0).
_scale: scaling factor (default 64), good values are between 50 and 300, depending on the map.
*/

/*QUAKED dom_controlpoint (.3 .3 1) (-16 -16 -16) (16 16 16) 
Domination  control point
In order to get Domination working well in your map, you need to place dom_team and dom_controlpoint entities.  You *must* have at least 3 dom_team entities - 2 minimum teams and one blank one (empty netname and no team).  You can have up to 4 teams (5 dom_team entities).
-------- KEYS --------
message: message to be displayed to all players when this point is captured, preceded by the team's name.  This defaults to " has captured a control point".  You can specify different names for each point, for example " has captured the Lava Room".
wait: How often this point gives its controlling team frags.
frags: How many frags this point gives each wait cycle.
*/

/*QUAKED dom_team (.3 .3 1) (-16 -16 -16) (16 16 16) 
Domination team.
In order to get Domination working well in your map, you need to place dom_team and dom_controlpoint entities.  You *must* have at least 3 dom_team entities - 2 minimum teams and one blank one (empty netname and no team).  You can have up to 4 teams (5 dom_team entities).
-------- KEYS --------
netname: name of team (Red Team).  Set to "" or don't define for the required blank team.
cnt: color of the team.  See the "Helpful Extras" section for info.
model: When this team captures control points, the points turn to this model.  If this is the neutral team, points start out as this model.
noise: Sound to be played on the control point when it's captured.  Only players nearby will hear it.
noise1: Sound to be played to all players when the control point is captured.  Also good for an announcer voice ("Red Team has captured a control point")
*/

/*QUAKED func_assault_destructible (.5 0 .5) (-8 -8 -8) (8 8 8) 
This is a brush model which can be damaged. Once triggered it's active and will happily receive damage players inflict upon it. Once all health is consumed it'll disappear and trigger the targeted entity/entities. As damage is received the brush model will be tinted in an increasingly visible flavor of red to give visible feedback.
-------- KEYS --------
health: The damage this trigger can take
target: The entity/entities to be triggered once this entity gets invisible
targetname: The name other entities can use to target this entity
*/

/*QUAKED func_assault_wall (.5 0 .5) (-8 -8 -8) (8 8 8) 
Brush model that will disappear once the targeted target_objective is fulfilled. This can be used to restrict access to parts of the map until a certain objective has been conquered.
-------- KEYS --------
target: targetname of a target_objective
*/

/*QUAKED func_bobbing (0 .5 .8) ? X_AXIS Y_AXIS
Solid entity that oscillates back and forth in a linear motion. By default, it will have an amount of displacement in either direction equal to the dimension of the brush in the axis in which it's bobbing. Entity bobs on the Z axis (up-down) by default. It can also emit sound if the "noise" key is set. Will crush the player when blocked.
-------- KEYS --------
speed: amount of time in seconds for one complete oscillation cycle (default 4).
height: sets the amount of travel of the oscillation movement (default 32). 
phase: sets the start offset of the oscillation cycle. Values must be 0 < phase < 1. Any integer phase value is the same as no offset (default 0).
noise: path/name of .wav or .ogg file to play. Use looping sounds only (e.g. sound/world/drone6.wav - See Notes).
dmg: damage a player who gets crushed by it receives
dmgtime: interval to apply dmg to a player who is s in the way
message: death message when a player gets crushed
-------- SPAWNFLAGS --------
X_AXIS: entity will bob along the X axis.
Y_AXIS: entity will bob along the Y axis.
*/

/*QUAKED func_button (0 .5 .8) ? 
When a button is touched by a player, it moves in the direction set by the "angle" key, triggers all its targets, stays pressed by an amount of time set by the "wait" key, then returns to it's original position where it can be operated again.
-------- KEYS --------
angle: determines the direction in which the button will move (up = -1, down = -2).
target: all entities with a matching targetname will be triggered.
speed: speed of button's displacement (default 40).
wait: number of seconds button stays pressed (default 1, -1 = return immediately).
lip: lip remaining at end of move (default 4 units).
health: (default 0) if set to any non-zero value, the button must take damage (any amount) to activate.
*/

/*QUAKED func_door (0 .5 .8) ? START_OPEN - DOOR_DONT_LINK - - TOGGLE
Normal sliding door entity. By default, the door will activate when player walks close to it or when damage is inflicted to it.
If DOOR_DONT_LINK is not set, the door will be linked with all doors it touches.
-------- KEYS --------
message: is printed when the door is touched if it is a trigger door and it hasn't been fired yet
angle: determines the opening direction
targetname: if set, no touch field will be spawned and a remote button or trigger field activates the door.
health: if set, door must be shot open
speed: movement speed (100 default)
wait: wait before returning (3 default, -1 = never return)
lip: lip remaining at end of move (8 default)
dmg: damage to inflict when blocked (when triggered and someone is in the way)
sounds: when 1, use default door sounds
noise1: sound when the door opens
noise2: sound when the door closes
-------- SPAWNFLAGS --------
START_OPEN: causes the door to move to its destination when spawned, and operate in reverse.  It is used to temporarily or permanently close off an area when triggered (not useful for touch or damage triggered doors).
DOOR_DONT_LINK: the door won't link with another door it touches
TOGGLE: causes the door to wait in both the start and end states for a trigger event.
*/

/*QUAKED func_door_secret (0 .5 .8) ? OPEN_ONCE 1ST_LEFT 1ST_DOWN NO_SHOOT ALWAYS_SHOOT
Basic secret door. Slides back, then to the side. Angle determines direction. Opens when targeted or when shot; does not create its own trigger field like func_door does.
-------- KEYS --------
wait: # of seconds before coming back
key1: first entity key with one-line description
key2: second entity key with one-line description
t_width: override WIDTH to move back (or height if going down)
t_length: override LENGTH to move sideways
dmg: damage to inflict when blocked (2 default)
message: text to display when activating the door
noise1: sound when opening backwards or closing
noise2: sound when opening sideways
noise3: sound when stopping
-------- SPAWNFLAGS --------
OPEN_ONCE: only work once, then stay open
1ST_LEFT: 1st move is left of arrow
1ST_DOWN: 1st move is down from arrow
NO_SHOOT: never respond to shots
ALWAYS_SHOOT: even if targetname is set, respond to shots
*/

/*QUAKED func_group (0 .5 .8) ? 
This is not an entity as such. It is strictly an editor utility to group world brushes and patches together for convenience (selecting, moving, copying, etc). You cannot group entities with this.
-------- Q3MAP2 KEYS --------
_lightmapscale: light map resolution factor
_castshadows: Allows per-entity control over shadow casting. Defaults to 0 on entities, 1 on world. 0 = no shadow casting. 1 = cast shadows on world. > 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding value, AND world. Negative values imply same, but DO NOT cast shadows on world.
_receiveshadows: Allows per-entity control over shadow reception. Defaults to 1 on everything (world shadows). 0 = receives NO shadows. > 1 = receive shadows only from corresponding keyed entities (see above) and world. < 1 = receive shadows ONLY from corresponding keyed entities.
_celshader: Sets the cel shader used for this geometry. Note: omit the "textures/" prefix.
-------- KEYS --------
_indexmap: Path/name for the TGA file used to guide the mapping of textures on the terrain surface.
_layers: number of unique root shaders that will be use on the terrain.
_shader: Path to the metashader used to assign textures to the terrain entity. Note: Omit the "textures/" prefix.
_offsets: space separated list of height offsets for the index map
*/

/*QUAKED func_ladder (0 .5 .8) ? 
a ladder, need i say no more
grab a trigger brush and put it in front of the part that you want the player to climb
*/

/*QUAKED func_plat (0 .5 .8) ? - - CRUSH
Rising platform the player can ride to reach higher places. Plats must always be drawn in the raised position, so they will operate and be lighted correctly but they spawn in the lowered position. The plat will stay in the raised position until the player steps off.
-------- KEYS --------
speed: determines how fast the plat moves (default 150).
lip: lip remaining at end of move (default 16). Has no effect if "height" is set.
height: if set, this will determine the total amount of vertical travel of the plat.
dmg: damage to inflict on player when he blocks operation of plat. Plat will reverse direction when blocked.
targetname: if set, the trigger that points to this will lower the plat each time it fires. The plat lowers and lifts someone up later.
sounds: 2 for alternate sound set, -1 for silence, or use the fields below
sound1: platform starts moving sound
sound2: platform stop sound
message: kill message, when someone gets killed by this plat
-------- SPAWNFLAGS --------
CRUSH: crush players hit by the platform instantly
-------- NOTES --------
By default, the total amount of vertical travel of a platform is implicitly determined by the overall vertical size of the brushes of which it's made minus the lip value. But if the "height" key is used, then the total amount of vertical travel of the plat will be exactly that value regardless of the shape and size of the plat and regardless of the value of the "lip" key. Using the "height" key is the best method for any kind of platforms and the only possible one for thin plats which need to travel vertical distances many times their own thickness. Setting the origin key is simply an alternate method to using an origin brush. When using the model2 key, the origin point of the model will correspond to the origin point defined by either the origin brush or the origin coordinate value.
*/

/*QUAKED func_rain (0 .5 .8) ? 
This is an invisible area like a trigger, which rain falls inside of.
-------- KEYS --------
velocity: falling direction (should be something like '0 0 -700', use the X and Y velocity for wind)
cnt: sets color of rain in the Quake palette (default 12 - white)
count: adjusts density, this many particles fall every second for a 1024x1024 area, default is 2000
*/

/*QUAKED func_rotating (0 .5 .8) ? - - X_AXIS Y_AXIS
Brush entity that spins in place on one axis (default Z). Use an origin brush to specify define the rotation axis.
To rotate around another axis, make a func_wall with an explicit avelocity given.
-------- KEYS --------
speed: speed to rotate (in degrees per second)
noise: path/name of looping .wav file to play.
dmg: Do this much dmg every .dmgtime interval when blocked
dmgtime: See above. (0.25s default)
message: kill message when crushed by this
-------- SPAWNFLAGS --------
X_AXIS: rotate around the X axis
Y_AXIS: rotate around the Y axis
*/

/*QUAKED func_snow (0 .5 .8) ? 
This is an invisible area like a trigger, which snow falls inside of.
-------- KEYS --------
velocity: falling direction (should be something like '0 0 -300', use the X and Y velocity for wind)
cnt: sets color of snow in the Quake palette (default 12 - white)
count: adjusts density, this many particles fall every second for a 1024x1024 area, default is 2000
*/

/*QUAKED func_stardust (.5 .5 .5) (-8 -8 -8) (8 8 8) 
Point entity with EF_STARDUST applied. This will spawn a particle cloud with mostly golden particles. Used as eye-candy.
*/

/*QUAKED func_train (0 .5 .8) ? 
Trains are moving solids that follow a cycle of path_corner entities. Origin brushes are NOT supported; they use the "mins" corner as reference (that is, lowest x, y, and z coordinates).
At each node, the train's mins corner hits exactly the path_corner.
Trains always start on in the game.
Trains do not damage the played when blocked.
Trains cannot emit sound.
Trains are not trigger-able or toggle-able.
Trains cannot be block-stopped just by getting in their way, the player must be wedged between the train and another obstacle to block it.
-------- KEYS --------
speed: default/initial speed of train (default 100 or overridden by speed value of targeted path_corner)
target: targetname of first path_corner to move to at the default speed; ideally, this path_corner shall be exactly where the train starts
*/

/*QUAKED func_wall (0 .5 .8) ? 
A solid brush entity.
Behaves just like solid brushes, except that it is a separate entity (a submodel) and can be targeted.
-------- KEYS --------
targetname: when invoking it by a button etc., it changes the color to the initiator of the action (e.g. the one pressing a button). In Onslaught, this can be used to color control points for team who owns them. In other game types, this can be used as a fun feature.
*/

/*QUAKED info_location (1 1 0) (-8 -8 -8) (8 8 8) 
Location for use by the %l escape in "say" messages.
The closest "visible" info_location entity is chosen to find the right location name for a point.
-------- KEYS --------
message: name of location, possibly with color codes
*/

/*QUAKED info_notnull (0 .5 0) (-8 -8 -8) (8 8 8) 
Entity that does nothing, but may be targeted (e.g. to use its position)
-------- KEYS --------
targetname: must match the target key of entity that uses this for pointing.
*/

/*QUAKED info_null (0 .5 0) (-8 -8 -8) (8 8 8) 
Aiming target for q3map2-internal entities like _decal or light. Removes itself when loaded, so it can NOT be used for in-game stuff!
-------- KEYS --------
targetname: the entity that requires an aiming direction points to this.
*/

/*QUAKED info_player_attacker (1 0.5 0) (-16 -16 -24) (16 16 45) 
Attacking team's player spawning location in Assault. Should touch the floor, but not the walls, and should point where the player should look when he spawns there.
-------- KEYS --------
target: this should point to a target_objective to decide when this spawning point is active.
cnt: weight of spawn point for random selection. Set to a lower value if you have many spawn points close together. Default value is 1.
*/

/*QUAKED info_player_deathmatch (0 1 0) (-16 -16 -24) (16 16 45) 
Normal player spawning location in game types without team spawns. Should touch the floor, but not the walls, and should point where the player should look when he spawns there.
-------- KEYS --------
cnt: weight of spawn point for random selection. Set to a lower value if you have many spawn points close together. Default value is 1.
targetname: when targeted by a func_button, pressing the button will assign the spawn point to the team of the activator as an additional spawn point, or reassign it if it was already assigned. Also used to assign spawn points to Onslaught control points.
*/

/*QUAKED info_player_defender (.5 .5 .5) (-16 -16 -24) (16 16 45) 
Defending team's player spawning location in Assault. Should touch the floor, but not the walls, and should point where the player should look when he spawns there.
-------- KEYS --------
target: this should point to a target_objective to decide when this spawning point is active.
cnt: weight of spawn point for random selection. Set to a lower value if you have many spawn points close together. Default value is 1.
*/

/*QUAKED info_player_team1 (1 0 0) (-16 -16 -24) (16 16 45) 
Red team's player spawning location in e.g. CTF and Onslaught. Should touch the floor, but not the walls, and should point where the player should look when he spawns there.
-------- KEYS --------
cnt: weight of spawn point for random selection. Set to a lower value if you have many spawn points close together. Default value is 1.
targetname: when targeted by a func_button, pressing the button will reassign the spawn point to the team of the activator. If a team has no more spawn point left, it immediately loses.
*/

/*QUAKED info_player_team2 (0 0 1) (-16 -16 -24) (16 16 45) 
Blue team's player spawning location in e.g. CTF and Onslaught. Should touch the floor, but not the walls, and should point where the player should look when he spawns there.
-------- KEYS --------
cnt: weight of spawn point for random selection. Set to a lower value if you have many spawn points close together. Default value is 1.
targetname: when targeted by a func_button, pressing the button will reassign the spawn point to the team of the activator. If a team has no more spawn point left, it immediately loses.
*/

/*QUAKED info_player_team3 (1 1 0) (-16 -16 -24) (16 16 45) 
Yellow team's player spawning location, but there is no game mode to use this yet. Anyway, should touch the floor, but not the walls, and should point where the player should look when he spawns there.
-------- KEYS --------
cnt: weight of spawn point for random selection. Set to a lower value if you have many spawn points close together. Default value is 1.
targetname: when targeted by a func_button, pressing the button will reassign the spawn point to the team of the activator. If a team has no more spawn point left, it immediately loses.
*/

/*QUAKED info_player_team4 (1 0 1) (-16 -16 -24) (16 16 45) 
Pink team's player spawning location, but there is no game mode to use this yet. Anyway, should touch the floor, but not the walls, and should point where the player should look when he spawns there.
-------- KEYS --------
cnt: weight of spawn point for random selection. Set to a lower value if you have many spawn points close together. Default value is 1.
targetname: when targeted by a func_button, pressing the button will reassign the spawn point to the team of the activator. If a team has no more spawn point left, it immediately loses.
*/

/*QUAKED item_armor_large (.4 .8 .4) (-30 -30 0) (30 30 32) FLOATING
Large Armor (default 100 armor points)
-------- KEYS --------
respawntime: time till it respawns (default: 30)
armorvalue: amount of armor it gives (default: 100 (g_pickup_armorlarge))
max_armorvalue: max of armor it increases to (default: 999 (g_pickup_armorlarge_max))
-------- SPAWNFLAGS --------
FLOATING: the item will float in air, instead of aligning to the floor by falling
-------- MODEL FOR RADIANT ONLY - DO NOT SET THIS AS A KEY --------
model="models/items/g_a25.md3"
*/

/*QUAKED item_armor_medium (.4 .8 .4) (-30 -30 0) (30 30 32) FLOATING
Medium Armor (default 25 armor points)
-------- KEYS --------
respawntime: time till it respawns (default: 30)
armorvalue: amount of armor it gives (default: 25 (g_pickup_armormedium))
max_armorvalue: max of armor it increases to (default: 999 (g_pickup_armormedium_max))
-------- SPAWNFLAGS --------
FLOATING: the item will float in air, instead of aligning to the floor by falling
-------- MODEL FOR RADIANT ONLY - DO NOT SET THIS AS A KEY --------
model="models/items/g_armormedium.md3"
*/

/*QUAKED item_armor_small (.4 .8 .4) (-30 -30 0) (30 30 32) FLOATING
Small Armor (default 5 armor points)
-------- KEYS --------
respawntime: time till it respawns (default: 15)
armorvalue: amount of armor it gives (default: 5 (g_pickup_armorsmall))
max_armorvalue: max of armor it increases to (default: 999 (g_pickup_armorsmall_max))
-------- SPAWNFLAGS --------
FLOATING: the item will float in air, instead of aligning to the floor by falling
-------- MODEL FOR RADIANT ONLY - DO NOT SET THIS AS A KEY --------
model="models/items/g_a1.md3"
*/

/*QUAKED item_bullets (.3 .3 1) (-30 -30 0) (30 30 32) FLOATING
Machine Gun ammo
-------- KEYS --------
ammo_nails: bullets gained by this item (if unset, g_pickup_nails is used)
respawntime: time till it respawns (default: 15)
-------- SPAWNFLAGS --------
FLOATING: the item will float in air, instead of aligning to the floor by falling
-------- MODEL FOR RADIANT ONLY - DO NOT SET THIS AS A KEY --------
model="models/items/a_bullets.mdl"
*/

/*QUAKED item_cells (.3 .3 1) (-30 -30 0) (30 30 32) FLOATING
Nex, Electro and Crylink ammo
-------- KEYS --------
ammo_cells: cells gained by this item (if unset, g_pickup_cells is used)
respawntime: time till it respawns (default: 15)
-------- SPAWNFLAGS --------
FLOATING: the item will float in air, instead of aligning to the floor by falling
-------- MODEL FOR RADIANT ONLY - DO NOT SET THIS AS A KEY --------
model="models/items/a_cells.md3"
*/

/*QUAKED item_flag_team1 (1 0 0) (-48 -48 -37) (48 48 37) 
CTF flag for team one (Red). Use more than one if you really insist.
-------- KEYS --------
model: model to use
scale: scaling factor (DO set this when using your own model!)
noise: sound played when flag is picked up
noise1: sound played when flag is returned
noise2: sound played when flag is captured
noise3: sound played when flag is lost in the field and respawns itself
*/

/*QUAKED item_flag_team2 (0 0 1) (-48 -48 -37) (48 48 37) 
CTF flag for team two (Blue). Use more than one if you really insist.
-------- KEYS --------
model: model to use
scale: scaling factor (DO set this when using your own model!)
noise: sound played when flag is picked up
noise1: sound played when flag is returned
noise2: sound played when flag is captured
noise3: sound played when flag is lost in the field and respawns itself
*/

/*QUAKED item_health_large (.9 .3 .3) (-30 -30 0) (30 30 48) FLOATING
Large Health (default 50 health points)
-------- KEYS --------
respawntime: time till it respawns (default: 15)
health: amount of health it gives (default: 50 (g_pickup_healthlarge))
max_health: max of health it increases to (default: 999 (g_pickup_healthlarge_max))
-------- SPAWNFLAGS --------
FLOATING: the item will float in air, instead of aligning to the floor by falling
-------- MODEL FOR RADIANT ONLY - DO NOT SET THIS AS A KEY --------
model="models/items/g_h50.md3"
*/

/*QUAKED item_health_medium (.9 .3 .3) (-30 -30 0) (30 30 48) FLOATING
Medium Health (default 25 health points)
-------- KEYS --------
respawntime: time till it respawns (default: 15)
health: amount of health it gives (default: 25 (g_pickup_healthmedium))
max_health: max of health it increases to (default: 999 (g_pickup_healthmedium_max))
-------- SPAWNFLAGS --------
FLOATING: the item will float in air, instead of aligning to the floor by falling
-------- MODEL FOR RADIANT ONLY - DO NOT SET THIS AS A KEY --------
model="models/items/g_h25.md3"
*/

/*QUAKED item_health_mega (.9 .3 .3) (-30 -30 0) (30 30 48) FLOATING
Mega Health (default 100 health points)
In Minstagib, this randomly turns into either an invisibility, an extra lives or a speed power-up with a default respawn time of 120.
-------- KEYS --------
respawntime: time till it respawns (default: 30)
health: amount of health it gives (default: 100 (g_pickup_healthmega))
max_health: max of health it increases to (default: 999 (g_pickup_healthmega_max))
-------- SPAWNFLAGS --------
FLOATING: the item will float in air, instead of aligning to the floor by falling
-------- MODEL FOR RADIANT ONLY - DO NOT SET THIS AS A KEY --------
model="models/items/g_h100.md3"
*/

/*QUAKED item_health_small (.9 .3 .3) (-30 -30 0) (30 30 48) FLOATING
Small Health (default 5 health points)
-------- KEYS --------
respawntime: time till it respawns (default: 15)
health: amount of health it gives (default: 5 (g_pickup_healthsmall))
max_health: max of health it increases to (default: 5 (g_pickup_healthsmall_max))
-------- SPAWNFLAGS --------
FLOATING: the item will float in air, instead of aligning to the floor by falling
-------- MODEL FOR RADIANT ONLY - DO NOT SET THIS AS A KEY --------
model="models/items/g_h1.md3"
*/

/*QUAKED item_invincible (.3 .3 1) (-30 -30 0) (30 30 48) FLOATING
Strong Shield
In Minstagib, this randomly turns into either an invisibility, an extra lives or a speed power-up with a default respawn time of 120.
-------- KEYS --------
respawntime: time till it respawns (default: 120)
-------- SPAWNFLAGS --------
FLOATING: the item will float in air, instead of aligning to the floor by falling
-------- MODEL FOR RADIANT ONLY - DO NOT SET THIS AS A KEY --------
model="models/items/g_invincible.md3"
*/

/*QUAKED item_minst_cells (.3 .3 1) (-30 -30 0) (30 30 32) FLOATING
Minstagib ammo.
Always contains 5 (g_minstagib_ammo_drop) shots.
It only appears when playing Minstagib and prevents auto-replacement of weapon_nex & weapon_rocketlauncher when used.
-------- KEYS --------
respawntime: time till it respawns (default: 45)
-------- SPAWNFLAGS --------
FLOATING: the item will float in air, instead of aligning to the floor by falling
-------- MODEL FOR RADIANT ONLY - DO NOT SET THIS AS A KEY --------
model="models/items/a_cells.md3"
*/

/*QUAKED item_rockets (.3 .3 1) (-30 -30 0) (30 30 32) FLOATING
Rocket Launcher, Hagar and Mortar ammo
-------- KEYS --------
ammo_rockets: rockets gained by this item (if unset, g_pickup_rockets is used)
respawntime: time till it respawns (default: 15)
-------- SPAWNFLAGS --------
FLOATING: the item will float in air, instead of aligning to the floor by falling
-------- MODEL FOR RADIANT ONLY - DO NOT SET THIS AS A KEY --------
model="models/items/a_rockets.md3"
*/

/*QUAKED item_shells (.3 .3 1) (-30 -30 0) (30 30 32) FLOATING
Shotgun ammo
-------- KEYS --------
ammo_shells: shells gained by this item (if unset, g_pickup_shells is used)
respawntime: time till it respawns (default: 15)
-------- SPAWNFLAGS --------
FLOATING: the item will float in air, instead of aligning to the floor by falling
-------- MODEL FOR RADIANT ONLY - DO NOT SET THIS AS A KEY --------
model="models/items/a_shells.md3"
*/

/*QUAKED item_strength (.3 .3 1) (-30 -30 0) (30 30 48) FLOATING
Strength aka Quad damage
In Minstagib, this randomly turns into either an invisibility, an extra lives or a speed power-up with a default respawn time of 120.
-------- KEYS --------
respawntime: time till it respawns (default: 120)
-------- SPAWNFLAGS --------
FLOATING: the item will float in air, instead of aligning to the floor by falling
-------- MODEL FOR RADIANT ONLY - DO NOT SET THIS AS A KEY --------
model="models/items/g_strength.md3"
*/

/*QUAKED light (.65 .65 1) (-8 -8 -8) (8 8 8) LINEAR NOANGLE - - NOGRIDLIGHT
Non-displayed point light source. The -pointscale and -scale arguments to Q3Map2 affect the brightness of these lights. The -skyscale argument affects brightness of entity sun lights.
Maximum intensity (in a radius 16 sphere around the light): regular lights have light/256, linear lights have light/8000-16*fade.
Falloff radius to a negligible light amount: regular lights have light have 16*sqrt(light), linear lights have light/(fade*8000).
By this you see that you HAVE to specify fade for a linear light... use values below 0.01 there.
-------- KEYS --------
light: intensity factor (default: 300). A linear
_color: weighted RGB value of light color (default white - 1.0 1.0 1.0).
target: Lights pointed at a target will be spotlights.
radius: radius of a spotlight at the target point (default: 64)
_anglescale: scales angle attenuation
fade: Fade factor of light attenuation of linear lights. Linear lights completely vanish at distance light/(fade*8000), so if you want the light to vanish at distance X, specify light/(8000*X) here.
_filterradius: filter radius for this light, similar to -light -filter
_sun: if 1, this light is an infinite sun light
_samples: number of samples to use to get soft shadows from a light
_deviance: position deviance of the samples of a regular light (distributes the light samples in a cube of side length 2*_deviance around the origin), or angle deviance of the sun light samples in radians
-------- SPAWNFLAGS --------
LINEAR: Use a linear falloff. Default is inverse distance squared (more realistic).
NOANGLE: Ignore angle attenuation.
NOGRIDLIGHT: Do not affect the light grid (dynamic entity lighting).
*/

/*QUAKED lightJunior (.65 .65 1) (-8 -8 -8) (8 8 8) LINEAR NOANGLE
Non-displayed point light source that JUST APPLIES TO THE LIGHT GRID. No idea what this is good for. The -pointscale and -scale arguments to Q3Map2 affect the brightness of these lights. The -skyscale argument affects brightness of entity sun lights.
Maximum intensity (in a radius 16 sphere around the light): regular lights have light/256, linear lights have light/8000-16*fade.
Falloff radius to a negligible light amount: regular lights have light have 16*sqrt(light), linear lights have light/(fade*8000).
By this you see that you HAVE to specify fade for a linear light... use values below 0.01 there.
-------- KEYS --------
light: intensity factor (default: 300). A linear
_color: weighted RGB value of light color (default white - 1.0 1.0 1.0).
target: Lights pointed at a target will be spotlights.
radius: radius of a spotlight at the target point (default: 64)
_anglescale: scales angle attenuation
fade: Fade factor of light attenuation of linear lights. Linear lights completely vanish at distance light/(fade*8000), so if you want the light to vanish at distance X, specify light/(8000*X) here.
_filterradius: filter radius for this light, similar to -light -filter
_sun: if 1, this light is an infinite sun light
_samples: number of samples to use to get soft shadows from a light
_deviance: position deviance of the samples of a regular light (distributes the light samples in a cube of side length 2*_deviance around the origin), or angle deviance of the sun light samples in radians
-------- SPAWNFLAGS --------
LINEAR: Use a linear falloff. Default is inverse distance squared (more realistic).
NOANGLE: Ignore angle attenuation.
*/

/*QUAKED misc_laser (.5 .5 .5) (-8 -8 -8) (8 8 8) 
Laser beam emitter
-------- KEYS --------
target: target_position the laser targets (may be another entity, the laser will then target its origin. Use origin brushes, that is!)
mdl: name of particle effect for the beam (see effectinfo.txt; default is misc_laser_beam)
dmg: damage inflicted by the beam per second, or -1 for an instant-death ray
wait: delay between laser scans (beam refreshes/hurts)
*/

/*QUAKED misc_model (1 .5 .25) (-16 -16 -16) (16 16 16) - SOLID - EXTRUDE_NORMALS EXTRUDE_TERRAIN
Generic placeholder for inserting MD3 models in game. Requires compilation of map geometry to be added to level. If the map is compiled with Q3Map2, then ASE, 3DS, OBJ and other model formats are supported.
-------- Q3MAP2 KEYS --------
model: file name of model to include
_frame: frame of model to include
_remap: string of the form from;to specifying which texture name of the model to replace by which shader; * is allowed. Any key starting with this prefix will work, so if you need more remappings, create _remap2, etc.
angle: view direction of the model
angles: view direction of the model in PITCH YAW ROLL
modelscale: scaling factor
modelscale_vec: scaling vector for non-uniform scaling
_castshadows: Allows per-entity control over shadow casting. Defaults to 0 on entities, 1 on world. 0 = no shadow casting. 1 = cast shadows on world. > 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding value, AND world. Negative values imply same, but DO NOT cast shadows on world.
_receiveshadows: Allows per-entity control over shadow reception. Defaults to 1 on everything (world shadows). 0 = receives NO shadows. > 1 = receive shadows only from corresponding keyed entities (see above) and world. < 1 = receive shadows ONLY from corresponding keyed entities.
_lightmapscale: light map resolution factor
_celshader: the cel shader for this
-------- SPAWNFLAGS --------
SOLID: make the model solid
EXTRUDE_NORMALS: for converting triangles to clip brushes, extrude along the model normals (by default, extrusion happens in a coordinate axis direction that is decided per triangle)
EXTRUDE_TERRAIN: always extrude downwards (for terrain)
*/

/*QUAKED misc_models (0 .5 .8) ? 
A non-solid brush entity, or a way to load models from a map (e.g. self-animated zym models).
Behaves just like non-solid brushes otherwise.
The keys below actually apply to most brush entities as they are engine features; however, they are described here as they aren't overridden by game code in misc_models. Its q3map2 keys below will work on any brush entity!
_receiveshadows only works if this is a brush model (that is, if "model" is not defined).
-------- KEYS --------
model: when used as a point entity, file name of model to load; when used as a brush entity, do not specify that
frame: animation frame to play (for self-animated zym models)
skin: number of skin to load (when model is used)
movetype: way in which it moves: one of 0 = NONE, 1 = ANGLENOCLIP, 2 = ANGLECLIP, 3 = WALK, 4 = STEP, 5 = FLY, 6 = TOSS, 7 = PUSH, 8 = NOCLIP, 9 = FLYMISSILE, 10 = BOUNCE, 11 = BOUNCEMISSILE
solid: solidity: one of 0 = NOT, 1 = TRIGGER, 2 = BBOX, 3 = SLIDEBOX, 4 = BSP, 5 = CORPSE
avelocity: vector giving its angular velocity (useful for spinning models)
scale: scale factor of the model (range: 0.0625 to 15.9375)
colormap: 1024 + 16 * pantscolor + shirtcolor
velocity: when movetype isn't 0, initial velocity vector
angles: initial looking direction
effects: sum of 1 = BRIGHTFIELD, 4 = BRIGHTLIGHT, 8 = DIMLIGHT, 32 = ADDITIVE, 64 = BLUE, 128 = RED, 512 = FULLBRIGHT, 1024 = FLAME, 2048 = STARDUST, 4096 = NOSHADOW, 8192 = NODEPTHTEST, 32768 = DOUBLESIDED, 8388608 = NOMODELFLAGS (ignores the following coming from a model file), 16777216 = ROCKET, 33554432 = GRENADE, 67108864 = GIB, 134217728 = ROTATE, 268435456 = TRACER, 536870912 = ZOMGIB, 1073741824 = TRACER2, -2147483648 = TRACER3
-------- Q3MAP2 KEYS --------
_frame: frame of model to include (set equal to frame if _castshadows is set)
modelscale: scaling factor (set equal to scale if _castshadows is set)
_castshadows: Allows per-entity control over shadow casting. Defaults to 0 on entities, 1 on world. 0 = no shadow casting. 1 = cast shadows on world. > 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding value, AND world. Negative values imply same, but DO NOT cast shadows on world.
_receiveshadows: Allows per-entity control over shadow reception. Defaults to 1 on everything (world shadows). 0 = receives NO shadows. > 1 = receive shadows only from corresponding keyed entities (see above) and world. < 1 = receive shadows ONLY from corresponding keyed entities.
_clone: copies brushes from entity with identical _clonename. Still needs a single brush that will get replaced.
_clonename: template name so one can clone from it
min: override automatically found minimum coordinate bounds
max: override automatically found maximum coordinate bounds
targetname: if targeted by a misc_model, its brushes get inserted into this
_celshader: Sets the cel shader used for this geometry. Note: omit the "textures/" prefix.
*/

/*QUAKED misc_teleporter_dest (1 .5 .25) (-16 -16 -24) (16 16 45) 
Teleport destination location point for trigger_teleport entities. Do not let it touch the floor, but place it slightly higher (like, 16 units above) for better flow when jumping through it.
-------- KEYS --------
targetname: make the trigger_teleporter point to this.
angle: direction in which player will look when teleported, OR use
angles: pitch and yaw when coming out of the teleporter (also specifies the direction the player will aim when coming out)
*/

/*QUAKED onslaught_controlpoint (0 .5 .8) (-32 -32 0) (32 32 128) 
Control point.  Be sure to give this enough clearance so that the shootable part has room to exist
This should link to an onslaught_controlpoint entity or onslaught_generator entity.
-------- KEYS --------
targetname: name that onslaught_link entities will use to target this.
target: target any entities that are tied to this control point, such as vehicles and buildable structure entities.
message: name of this control point (should reflect the location in the map, such as "center bridge", "north tower", etc)
*/

/*QUAKED onslaught_generator (0 .5 .8) (-32 -32 -24) (32 32 64) 
Base generator.

onslaught_link entities can target this.
-------- KEYS --------
team: team that owns this generator (5 = red, 14 = blue, etc), MUST BE SET.
targetname: name that onslaught_link entities will use to target this.
*/

/*QUAKED onslaught_link (0 .5 .8) (-16 -16 -16) (16 16 16) 
Link between control points.

This entity targets two different onslaught_controlpoint or onslaught_generator entities, and suppresses shielding on both if they are owned by different teams.
-------- KEYS --------
target: first control point.
target2: second control point.
*/

/*QUAKED path_corner (.5 .3 0) (-8 -8 -8) (8 8 8) 
Path corner entity that func_train will follow.
All path_corner entities of a train have to connect in a circular manner, while the func_train shall point to one of the path_corners (ideally the one at the train's starting point)
-------- KEYS --------
target: point to next path_corner in the path.
targetname: the train following the path or the previous path_corner in the path points to this.
speed: speed of func_train while moving to this path corner. If unset, the value from the func_train will be used.
wait: number of seconds func_train will pause on this path corner before moving to next path corner (default: 0.1; to not wait, set this to something like 0.001)
*/

/*QUAKED runematch_spawn_point (.3 .3 1) (-16 -16 -16) (16 16 16) 
Spawn point for runes in a runematch.
*/

/*QUAKED target_assault_roundend (1 0 0) (-8 -8 -8) (8 8 8) 
This entity ends the current assault round if triggered or if the timelimit is reached.
Ending a round means swapping attacker/defender teams, resetting objectives and rewarding the winning team.
Every assault map needs this entity. There should only be one per map.
-------- KEYS --------
health: Time in seconds how long a round in assault shall last. Default is 300 seconds.
targetname: Name to target this entity
*/

/*QUAKED target_assault_roundstart (.5 0 .5) (-8 -8 -8) (8 8 8) 
This entity triggers its targets whenever a new assault round is started. This can be used to e.g. activate the first objective.
-------- KEYS --------
target: targetname of the entity/entities to be triggered
*/

/*QUAKED target_objective (.5 0 .5) (-8 -8 -8) (8 8 8) 
target_objective controls an objective. Once triggered the objective is active and has 100 "health" points. If this "health" falls below zero it is assumed this objective has been fulfilled and entities targeted will be triggered (e.g. to activate the next objective or to end this round). Use target_objective_decrease to decrease the objective health.
-------- KEYS --------
target: targetname of the entity to be triggered once this objective is fulfilled.
targetname: targetname for this entity so it can be triggered by other entities.
*/

/*QUAKED target_objective_decrease (0 1 0) (-8 -8 -8) (8 8 8) 
When triggered decreases health of the targeted target_objective by the amount specified in dmg. Remember, target_objective has 100 health points and is considered conquered if health falls below zero.
If you want e.g. two events to happen to conquer an objective you'd need two target_objective_decrease, each with a value for cnt of e.g. 51. To show attackers and defenders where to go, target_objective_decrease will show a fitting sprite ("Defend" to defenders, "Destroy"/"Push" to attackers) which can be seen through walls.
-------- KEYS --------
target: The targetname of the target_objective you want to manipulate.
targetname: Name for other entities to target this entity.
dmg: The amount of "health"-points you want to subtract from the objective health. Defaults to 101.
-------- SPAWNFLAGS --------
*/

/*QUAKED target_position (0 .5 0) (-8 -8 -8) (8 8 8) 
Aiming target for entities like light and trigger_push.
-------- KEYS --------
targetname: the entity that requires an aiming direction points to this.
*/

/*QUAKED target_speaker (0 .7 .7) (-8 -8 -8) (8 8 8) 
Sound generating entity that plays sound files.
If targeted, it plays the sound file every time when triggered.
If not targeted, it loops the sound file as an ambient noise.
-------- KEYS --------
noise: path/name of .wav/.ogg file to play
targetname: the activating button or trigger points to this.
*/

/*QUAKED trigger_counter (.5 .5 .5) ? NOMESSAGE
Acts as an intermediary for an action that takes multiple inputs.
After the counter has been triggered "count" times, it will fire all of its targets and remove itself.
-------- KEYS --------
count: how many times this needs to be triggered to activate its targets
target: trigger all entities with this targetname when triggered
targetname: name that identifies this entity so ti can be triggered
delay: delay the triggering by the given time
message: print this message to the player who activated the trigger
killtarget: remove all entities with this targetname when triggered
-------- SPAWNFLAGS --------
NOMESSAGE: don't print a "2 more to go..."-like message when triggered
*/

/*QUAKED trigger_delay (.5 .5 .5) (-8 -8 -8) (8 8 8) 
Trigger that delays triggering by a given amount of time. Only one action can be waited for; if triggered again before the "wait" time expires, the timer will restart (as opposed to trigger_relay).
-------- KEYS --------
wait: delay the triggering by the given time
target: trigger all entities with this targetname when triggered
targetname: name that identifies this entity so ti can be triggered
message: print this message to the player who activated the trigger
killtarget: remove all entities with this targetname when triggered
*/

/*QUAKED trigger_hurt (.5 .5 .5) ? 
Any object touching this will be hurt.
Has the useful effect of automatically returning flags, keys and runes when they touch it.
-------- KEYS --------
dmg: amount of damage to deal (default: 1000)
message: kill message when someone gets killed by this (default: "was in the wrong place.")
*/

/*QUAKED trigger_impulse (.5 .5 .5) ? 
An accelerator/dampener/wind field.
Can be used in two ways:
"dampener field": just set strength to a value from 0 to 1. Entering the field will slow down to this factor.
"accelerator field": just set strength to a value from 1 to infinity. Entering the field will accelerate by this factor.
"wind field": set strength to the amount of velocity to add per second, and target a target_position. The field will apply force in the direction from its own origin to the target (use an origin brush to specify its own origin, or this will fail) when touched.
"gravity field": set strength to the amount of velocity to add per second at the center, and set radius to the radius of the field. Set falloff to the desired falloff characteristics.
-------- KEYS --------
target: "wind field": points to the target_position to which the player will get pushed.
strength: "wind field", "gravity field": amount of force per second to apply. "dampener/accelerator field": slowdown/speedup factor.
falloff: "gravity field": 0 means no falloff, 1 means linear falloff (zero at the outside), 2 means inverted linear falloff (zero at the inside)
*/

/*QUAKED trigger_multiple (.5 .5 .5) ? NOTOUCH
Variable sized repeatable trigger.  Must be targeted at one or more entities.  If "health" is set, the trigger must be killed to activate each time.
-------- KEYS --------
health: amount of damage that has to be dealt to the trigger to activate (it then won't respond to merely touching it)
wait: prevent triggering again for this amount of time
sounds: 1 to play misc/secret.wav, 2 to play misc/talk.wav, 3 to play misc/trigger1.wav
noise: path to sound file, if you want to play something else
target: trigger all entities with this targetname when triggered
targetname: name that identifies this entity so ti can be triggered
delay: delay the triggering by the given time
message: print this message to the player who activated the trigger
killtarget: remove all entities with this targetname when triggered
-------- SPAWNFLAGS --------
NOTOUCH: the trigger can only be triggered by other entities, not by touching or firing (you should probably use trigger_relay or trigger_delay instead)
*/

/*QUAKED trigger_once (.5 .5 .5) ? NOTOUCH
Variable sized repeatable trigger.  Must be targeted at one or more entities.  If "health" is set, the trigger must be killed to activate each time.
Basically, it's a use-once trigger_multiple.
-------- KEYS --------
health: amount of damage that has to be dealt to the trigger to activate (it then won't respond to merely touching it)
sounds: 1 to play misc/secret.wav, 2 to play misc/talk.wav, 3 to play misc/trigger1.wav
noise: path to sound file, if you want to play something else
target: trigger all entities with this targetname when triggered
targetname: name that identifies this entity so ti can be triggered
delay: delay the triggering by the given time
message: print this message to the player who activated the trigger
killtarget: remove all entities with this targetname when triggered
-------- SPAWNFLAGS --------
NOTOUCH: the trigger can only be triggered by other entities, not by touching or firing (you should probably use trigger_relay or trigger_delay instead)
*/

/*QUAKED trigger_push (1 .5 0) ? 
Jump pad. What else?
Can be used in three ways:
Nexuiz "target/height" way: put the target_position where the player should land, and tune height to get a nice jump path. A good starting value for height is 100.
Q3A "target" way: put the target_position at the apex of the jump, and hope the player will land at the right spot. Good luck.
Quake "movedir/speed" way: player will get velocity movedir * speed * 10 when using the jump pad
-------- KEYS --------
target: point the player will fly to when using the jump pad (use a target_position here)
height: if height is 0, the (player's origin at the) apex of the jump will be at the target; otherwise, the apex will be abs(height) above the higher point of player's origin and the target; if positive, the apex will be reached in the jump from initial origin to target
movedir: when target is not set, direction vector to push to
speed: speed of jump pad (default: 1000)
noise: sound to play when jump pad is used; default is misc/jumppad.wav; you can set it to "" to make the pad silent
*/

/*QUAKED trigger_relay (.5 .5 .5) (-8 -8 -8) (8 8 8) 
This fixed size trigger cannot be touched, it can only be fired by other events. It can, like any other trigger, contain killtargets, targets, delays, and messages.
One possible use is to trigger entities with more than one targetname on an action, e.g. a button. For this, set target of your button to foobar. Create two trigger_relay with targetname=foobar. Give one of the trigger_relay entities target=ent1, and give the other target=ent2.
More than one "trigger event" can be delayed at once, as opposed to trigger_delay.
-------- KEYS --------
target: trigger all entities with this targetname when triggered
targetname: name that identifies this entity so ti can be triggered
delay: delay the triggering by the given time
message: print this message to the player who activated the trigger
killtarget: remove all entities with this targetname when triggered
*/

/*QUAKED trigger_swamp (.5 .5 .5) ? 
Players getting into the swamp will get slowed down and damaged
-------- KEYS --------
dmg: damage per interval to deal (default is 5)
swamp_interval: interval of damage when in swamp (default is 1)
swamp_slowdown: amount of slowdown caused by the swamp (default is 0.5)
*/

/*QUAKED trigger_teleport (.5 .5 .5) ? 
Touching this will teleport players to the location of the targeted misc_teleporter_dest entity.
Note that in Nexuiz, teleporters preserve momentum of the player using them.
-------- KEYS --------
target: this must point to a misc_teleporter_dest entity.
*/

/*QUAKED weapon_crylink (1 0 .5) (-30 -30 0) (30 30 32) FLOATING
the Crylink
-------- KEYS --------
ammo_cells: initial cells of the weapon (if unset, g_pickup_cells is used)
respawntime: time till it respawns (default: 15)
-------- SPAWNFLAGS --------
FLOATING: the item will float in air, instead of aligning to the floor by falling
-------- MODEL FOR RADIANT ONLY - DO NOT SET THIS AS A KEY --------
model="models/weapons/g_crylink.md3"
*/

/*QUAKED weapon_electro (1 0 .5) (-30 -30 0) (30 30 32) FLOATING
the Electro
-------- KEYS --------
ammo_cells: initial cells of the weapon (if unset, g_pickup_cells is used)
respawntime: time till it respawns (default: 15)
-------- SPAWNFLAGS --------
FLOATING: the item will float in air, instead of aligning to the floor by falling
-------- MODEL FOR RADIANT ONLY - DO NOT SET THIS AS A KEY --------
model="models/weapons/g_electro.md3"
*/

/*QUAKED weapon_grenadelauncher (1 0 .5) (-30 -30 0) (30 30 32) FLOATING
the Mortar
-------- KEYS --------
ammo_rockets: initial rockets of the weapon (if unset, g_pickup_rockets is used)
respawntime: time till it respawns (default: 15)
-------- SPAWNFLAGS --------
FLOATING: the item will float in air, instead of aligning to the floor by falling
-------- MODEL FOR RADIANT ONLY - DO NOT SET THIS AS A KEY --------
model="models/weapons/g_gl.md3"
*/

/*QUAKED weapon_hagar (1 0 .5) (-30 -30 0) (30 30 32) FLOATING
the Hagar
-------- KEYS --------
ammo_rockets: initial rockets of the weapon (if unset, g_pickup_rockets is used)
respawntime: time till it respawns (default: 15)
-------- SPAWNFLAGS --------
FLOATING: the item will float in air, instead of aligning to the floor by falling
-------- MODEL FOR RADIANT ONLY - DO NOT SET THIS AS A KEY --------
model="models/weapons/g_hagar.md3"
*/

/*QUAKED weapon_nex (1 0 .5) (-30 -30 0) (30 30 32) FLOATING
the Nex
In Minstagib, this turns into an item_minst_cells if no explicit item_minst_cells have been placed.
-------- KEYS --------
ammo_cells: initial cells of the weapon (if unset, g_pickup_cells is used)
respawntime: time till it respawns (default: 15 * g_balance_nex_respawntime_modifier)
-------- SPAWNFLAGS --------
FLOATING: the item will float in air, instead of aligning to the floor by falling
-------- MODEL FOR RADIANT ONLY - DO NOT SET THIS AS A KEY --------
model="models/weapons/g_nex.md3"
*/

/*QUAKED weapon_rocketlauncher (1 0 .5) (-30 -30 0) (30 30 32) FLOATING
the Rocket Launcher
In Minstagib, this turns into an item_minst_cells if no explicit item_minst_cells have been placed.
-------- KEYS --------
ammo_rockets: initial rockets of the weapon (if unset, g_pickup_rockets is used)
respawntime: time till it respawns (default: 15)
-------- SPAWNFLAGS --------
FLOATING: the item will float in air, instead of aligning to the floor by falling
-------- MODEL FOR RADIANT ONLY - DO NOT SET THIS AS A KEY --------
model="models/weapons/g_rl.md3"
*/

/*QUAKED weapon_shotgun (1 0 .5) (-30 -30 0) (30 30 32) FLOATING
the Shotgun
-------- KEYS --------
ammo_shells: initial shells of the weapon (if unset, g_pickup_shells is used)
respawntime: time till it respawns (default: 15)
-------- SPAWNFLAGS --------
FLOATING: the item will float in air, instead of aligning to the floor by falling
-------- MODEL FOR RADIANT ONLY - DO NOT SET THIS AS A KEY --------
model="models/weapons/g_shotgun.md3"
*/

/*QUAKED weapon_uzi (1 0 .5) (-30 -30 0) (30 30 32) FLOATING
the Machine Gun
-------- KEYS --------
ammo_nails: initial bullets of the weapon (if unset, g_pickup_nails is used)
respawntime: time till it respawns (default: 15)
-------- SPAWNFLAGS --------
FLOATING: the item will float in air, instead of aligning to the floor by falling
-------- MODEL FOR RADIANT ONLY - DO NOT SET THIS AS A KEY --------
model="models/weapons/g_uzi.md3"
*/

/*QUAKED worldspawn (0 0 0) ? 
The world.
If you see this, the currently selected brush is not of an entity.
-------- KEYS --------
fog: fog parameters of the map (density red green blue alpha mindist maxdist); works just like the "fog" console command
author: name of the author of the map, if not specified in "message". Will get copied to the "author" entry of the mapinfo file when none is present.
message: text to print at user logon. Used for name of level. Ideally: "NAMEOFLEVEL by AUTHOR". Will get copied to the "title" and "author" entries of the mapinfo file when none is present.
_description: one-line description of the map. Will get copied to the "description" entry of the mapinfo file when none is present.
-------- Q3MAP2 KEYS --------
_blocksize: vector specifying the automatic vis subdivision block size (default: 1024 1024 1024)
gridsize: lightgrid granularity vector (default: 64 64 128)
_color: color of the global light parameters
_ambient: light added to all surfaces
_mingridlight: minimum grid light
_minlight: minimum light value on both surfaces and lightgrid
_keepLights: do not remove light entities from the map (useful e.g. for realtime lighting)
_floodlight: flood light parameters (red green blue distance intensity), start with 240 240 255 1024 128
_farplanedist: range after which everything is completely invisible by fog (when fog is being used)
_noshadersun: turn off sun defined by shaders (useful if you defined your own light entity to be a sun)
_ignoreleaks: ignore leaks when compiling
_lightmapscale: light map resolution factor
_castshadows: Allows per-entity control over shadow casting. Defaults to 0 on entities, 1 on world. 0 = no shadow casting.1 = cast shadows on world. > 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding value, AND world. Negative values imply same, but DO NOT cast shadows on world.
_receiveshadows: Allows per-entity control over shadow reception. Defaults to 1 on everything (world shadows). 0 = receives NO shadows. > 1 = receive shadows only from corresponding keyed entities (see above) and world. < 1 = receive shadows ONLY from corresponding keyed entities.
_celshader: Sets the cel shader used for this geometry. Note: omit the "textures/" prefix.
*/

