// note: this is in util.qh so it is included as early as possible.
var void(string s, ...) dprint;
void dprint_null() { }
void dprint_load()
{
	if(cvar("developer") > 0)
		dprint = print;
	else
		dprint = dprint_null;
}

// this returns a tempstring containing a copy of s with additional \n newlines added, it also replaces \n in the text with a real newline
// NOTE: s IS allowed to be a tempstring
string wordwrap(string s, float l);
#ifndef MENUQC
#ifndef CSQC
void wordwrap_sprint(string s, float l);
#endif
#endif
void wordwrap_cb(string s, float l, void(string) callback)

float GameCommand_Generic(string cmd);
// returns TRUE if handled, FALSE otherwise
// uses tokenize on its argument!

// iterative depth-first search, with fields that go "up", "down left" and "right" in a tree
// for each element, funcPre is called first, then funcPre and funcPost for all its children, and funcPost last
void depthfirst(entity start, .entity up, .entity downleft, .entity right, void(entity, entity) funcPre, void(entity, entity) funcPost, entity pass);

float median(float a, float b, float c);

// converts a number to a string with the indicated number of decimals
// works for up to 10 decimals!
string ftos_decimals(float number, float decimals);

vector colormapPaletteColor(float c, float isPants);

// unzone the string, and return it as tempstring. Safe to be called on string_null
string fstrunzone(string s);

// database (NOTE: keys are case sensitive)
void db_save(float db, string filename);
void db_dump(float db, string pFilename);
float db_create();
float db_load(string filename);
void db_close(float db);
string db_get(float db, string key);
void db_put(float db, string key, string value);

// stringbuffer loading/saving
float buf_load(string filename);
void buf_save(float buf, string filename);

// modulo function
#ifndef MENUQC
float mod(float a, float b) { return a - (floor(a / b) * b); }   
#endif

string GametypeNameFromType(float g);
string mmsss(float t);
string ScoreString(float vflags, float value);

vector cross(vector a, vector b);

void compressShortVector_init();
vector decompressShortVector(float data);
float compressShortVector(vector vec);

#ifndef MENUQC
float CheckWireframeBox(entity forent, vector v0, vector dvx, vector dvy, vector dvz);

void fixedmakevectors(vector a);
#define fixedvectoangles2 vectoangles2
#define fixedvectoangles vectoangles
#endif

string fixPriorityList(string pl, float from, float to, float subtract, float complete);
string swapInPriorityList(string order, float i, float j);

float cvar_value_issafe(string s);

void cvar_settemp(string pKey, string pValue);
void cvar_settemp_restore();

#ifndef MENUQC
// modes: 0 = trust q3map2 (_mini images)
//        1 = trust tracebox (_radar images)
// in both modes, mapinfo's "size" overrides

string mi_shortname;
vector mi_min;
vector mi_max;
void get_mi_min_max(float mode);

vector mi_picmin; // adjusted mins that map to the picture (square)
vector mi_picmax; // adjusted maxs that map to the picture (square)
vector mi_pictexcoord0; // texcoords of the image corners (after transforming, these are 2D coords too)
vector mi_pictexcoord1; // texcoords of the image corners (after transforming, these are 2D coords too)
vector mi_pictexcoord2; // texcoords of the image corners (after transforming, these are 2D coords too)
vector mi_pictexcoord3; // texcoords of the image corners (after transforming, these are 2D coords too)
void get_mi_min_max_texcoords(float mode);
#endif

#define FTEQCC_YOU_SUCK_THIS_IS_NOT_UNREFERENCED(x) void reference_##x() { x = x; }

float almost_equals(float a, float b);
float almost_in_bounds(float a, float b, float c);

#undef tokenize
#undef tokenizebyseparator
#undef argv

var string(float) argv;
var float(float) argv_start_index;
var float(float) argv_end_index;
float tokenize_sane(string s);
float tokenize_sane_force_emulation(string s);
float tokenize_sane_force_native(string s);
float tokenize_insane(string s);
float tokenizebyseparator(string s, string sep);

float power2of(float e);
float log2of(float x);

string HEXDIGITS = "0123456789ABCDEF0123456789abcdef";
#define HEXDIGIT_TO_DEC_RAW(d) (strstrofs(HEXDIGITS, (d), 0))
#define HEXDIGIT_TO_DEC(d) ((HEXDIGIT_TO_DEC_RAW(d) | 0x10) - 0x10)
#define DEC_TO_HEXDIGIT(d) (substring(HEXDIGITS, (d), 1))

vector rgb_to_hsl(vector rgb);
vector hsl_to_rgb(vector hsl);
vector rgb_to_hsv(vector rgb);
vector hsv_to_rgb(vector hsv);
string rgb_to_hexcolor(vector rgb);

float boxesoverlap(vector m1, vector m2, vector m3, vector m4);
float boxinsidebox(vector smins, vector smaxs, vector bmins, vector bmaxs);

#ifndef MENUQC
vector AnglesTransform_Apply(vector transform, vector v);
vector AnglesTransform_Multiply(vector t1, vector t2);
vector AnglesTransform_Invert(vector transform);
vector AnglesTransform_TurnDirection(vector transform);
vector AnglesTransform_Divide(vector to_transform, vector from_transform);
#endif

typedef float(string s) textLengthUpToWidth_widthFunction_t;
float textLengthUpToWidth(string theText, float maxWidth, textLengthUpToWidth_widthFunction_t tw);
string textShortenToWidth(string theText, float maxWidth, textLengthUpToWidth_widthFunction_t tw);

string getWrappedLine_remaining;
string getWrappedLine(float w, textLengthUpToWidth_widthFunction_t tw);

float isGametypeInFilter(float gt, float tp, string pattern);

typedef void(float i1, float i2) shuffle_swapfunc_t; // is only ever called for i1 < i2
void shuffle(float n, shuffle_swapfunc_t swap);

string swapwords(string str, float i, float j);
string shufflewords(string str);

string substring_range(string s, float b, float e);
