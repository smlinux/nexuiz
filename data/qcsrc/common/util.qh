// note: this is in util.qh so it is included as early as possible.
var void(string s, ...) dprint;
void dprint_null() { }
void dprint_load()
{
	if(cvar("developer") > 0)
		dprint = print;
	else
		dprint = dprint_null;
}

// this returns a tempstring containing a copy of s with additional \n newlines added, it also replaces \n in the text with a real newline
// NOTE: s IS allowed to be a tempstring
string wordwrap(string s, float l);
#ifndef MENUQC
#ifndef CSQC
void wordwrap_sprint(string s, float l);
#endif
#endif
void wordwrap_cb(string s, float l, void(string) callback)

float GameCommand_Generic(string cmd);
// returns TRUE if handled, FALSE otherwise
// uses tokenize on its argument!

// iterative depth-first search, with fields that go "up", "down left" and "right" in a tree
// for each element, funcPre is called first, then funcPre and funcPost for all its children, and funcPost last
void depthfirst(entity start, .entity up, .entity downleft, .entity right, void(entity, entity) funcPre, void(entity, entity) funcPost, entity pass);

float median(float a, float b, float c);

// converts a number to a string with the indicated number of decimals
// works for up to 10 decimals!
string ftos_decimals(float number, float decimals);

vector colormapPaletteColor(float c, float isPants);

// unzone the string, and return it as tempstring. Safe to be called on string_null
string fstrunzone(string s);

// database (NOTE: keys are case sensitive)
void db_save(float db, string filename);
void db_dump(float db, string pFilename);
float db_create();
float db_load(string filename);
void db_close(float db);
string db_get(float db, string key);
void db_put(float db, string key, string value);

// stringbuffer loading/saving
float buf_load(string filename);
void buf_save(float buf, string filename);

// modulo function
#ifndef MENUQC
float mod(float a, float b) { return a - (floor(a / b) * b); }   
#endif

string GametypeNameFromType(float g);
string mmsss(float t);
string ScoreString(float vflags, float value);

vector cross(vector a, vector b);
