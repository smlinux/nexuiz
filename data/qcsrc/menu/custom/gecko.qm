// Andreas Kirsch 2007
// Im putting it into custom because its not really engineered but simply hacked together
.string targetURL;

var float _gecko_instanceNumber;

void() Item_Gecko_Draw = {
	Menu_DrawPicture( self.pos, self.picture, self.size, self.color, self.alpha, self.drawFlag );
};

void() Item_Gecko_Destroy =
{
	if( self.picture ) {
		gecko_destroy( self.picture );
	}

	String_EntityFree( self, picture );
};

void() Item_Gecko_Update = {
	// "normalize" the mouse position
	local vector lNormalizedPosition;
	lNormalizedPosition_x = (Menu_Cursor_Position_x - self.pos_x) / self.size_x;
	lNormalizedPosition_y = (Menu_Cursor_Position_y - self.pos_y) / self.size_y;
	lNormalizedPosition_z = 0.0;

	print( vtos( Menu_Cursor_Position ), " ", vtos( lNormalizedPosition ), "\n" );

	if( Util_InRect( lNormalizedPosition, '0 0 0', '1 1 0' ) ) {
		gecko_mousemove( self.picture, lNormalizedPosition_x, lNormalizedPosition_y );
	}
};

bool( float pKey, float pAscii ) Item_Gecko_Key = {
	if( pKey == K_ESCAPE ) {
		return false;
	}
	return gecko_keyevent( self.picture, pKey, GECKO_BUTTON_PRESS );
};

void() Item_Gecko_Spawn = {
	// targetURL wont be changed anyway...
	self.picture = String_Zone( strcat( "_dynamic/gecko/menu/", ftos( _gecko_instanceNumber ) ) );
	_gecko_instanceNumber += 1;

	gecko_create( self.picture );
	gecko_navigate( self.picture, self.targetURL );

	self._destroy = Item_Gecko_Destroy;
	self._key = Item_Gecko_Key;
	self._draw = Item_Gecko_Draw;
	self._update = Item_Gecko_Update;
};


