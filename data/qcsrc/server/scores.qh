float scores_initialized; // 1 when scores labels/rules have been set

/**
 * Attaches a PlayerScore entity to a player. Use that in ClientConnect.
 * Remember to detach it in ClientDisconnect!
 */
void PlayerScore_Attach(entity player);

/**
 * Detaches a PlayerScore entity from the player. Use that in ClientDisconnect.
 */
void PlayerScore_Detach(entity player);

/**
 * Adds a score to the player's scores.
 * NEVER call this if PlayerScore_Attach has not been called yet!
 * Means: FIXME make players unable to join the game when not called ClientConnect yet.
 * Returns the new score.
 */
float PlayerScore_Add(entity player, float scorefield, float score);

/**
 * Initialize the score of this player if needed.
 * Does nothing in teamplay.
 * Use that when a spectator becomes a player.
 */
void PlayerScore_Clear(entity player);

/**
 * Adds a score to the player's team's scores.
 * NEVER call this if team has not been set yet!
 * Returns the new score.
 */
float TeamScore_Add(entity player, float scorefield, float score);

/**
 * Adds a score to the given team.
 * NEVER call this if team has not been set yet!
 * Returns the new score.
 */
float TeamScore_AddToTeam(float t, float scorefield, float score);

/**
 * Adds a score to both the player and the team.
 */
void PlayerTeamScore_Add(entity player, float pscorefield, float tscorefield, float score);

/**
 * Adds to the generic score fields for both the player and the team.
 */
#define PlayerTeamScore_AddScore(p,s) PlayerTeamScore_Add(p, SP_SCORE, ST_SCORE, s)

/**
 * Set the label of a team score item, as well as the scoring flags.
 */
void ScoreInfo_SetLabel_TeamScore(float i, string label, float scoreflags);

/**
 * Set the label of a player score item, as well as the scoring flags.
 */
void ScoreInfo_SetLabel_PlayerScore(float i, string label, float scoreflags);

/**
 * Initialize the scores info for the given number of teams.
 * Set all labels right before this call.
 */
void ScoreInfo_Init(float teams);

/**
 * Writes the scores info to the given stream. Use this in ClientConnect to
 * notify newly connecting players.
 */
void ScoreInfo_Write(float targ);

/**
 * Clear ALL scores (for ready-restart).
 */
void Score_ClearAll();

/**
 * Prints the scores (ugly!) to the console.
 */
void Score_DebugPrint();

/**
 * Sets the following results for the current scores entities.
 */
void WinningConditionHelper();
float WinningConditionHelper_topscore;   ///< highest score
float WinningConditionHelper_equality;   ///< 1 if and only if the top two have equal scores
float WinningConditionHelper_winnerteam; ///< the color of the winning team, or -1 if none
entity WinningConditionHelper_winner;    ///< the winning player, or world if none

/**
 * Returns score strings for eventlog etc.
 * When called with world, or 0, as argument, they return the labels in the
 * same order.
 * The strings are comma separated; labels that end with !! designate primary,
 * labels that end with ! designate high priority.
 * Labels get an appended < if the scores are better if smaller (e.g. deaths).
 * High priorities always come first.
 * Example label string: score!!,kills,deaths<,suicides<
 */
string GetPlayerScoreString(entity pl);
string GetTeamScoreString(float tm);
